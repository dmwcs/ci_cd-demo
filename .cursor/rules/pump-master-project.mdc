---
alwaysApply: true
---

# Pump Master Web App - 项目开发规范

## 项目概述

这是一个农业泵管理平台 (Pump Master Web App)，用于帮助农业客户管理他们的泵资产。

## 技术评估要求

根据技术评估文档，需要实现以下核心功能：

- **安全租户登录** (Secure Tenancy Login) - ✅ 已完成
- **泵概览** (Pump Overview) - 🔄 开发中
- **搜索和过滤** (Search & Filtering) - 📋 待开发
- **泵管理** (Pump Management) - 📋 待开发
- **泵检查** (Pump Inspection) - 📋 待开发

## 项目结构

```
src/
├── app/                    # 页面组件
│   ├── components/         # 共享组件
│   │   └── Navbar/        # 导航栏组件
│   ├── Login/             # 登录页面 ✅
│   ├── PumpList/          # 泵列表页面 🔄
│   └── PumpDetail/        # 泵详情页面 🔄
├── hooks/                 # 自定义 Hooks
│   └── useAuth.tsx        # 认证 Hook ✅
├── utils/                 # 工具函数
│   └── mockDataFetch.ts   # 模拟数据获取 ✅
└── test/                  # 测试配置
```

## 技术栈

- **前端框架**: React 19 + TypeScript
- **构建工具**: Vite
- **路由**: React Router v7
- **UI 框架**: Bootstrap 5 + React Bootstrap
- **状态管理**: React Context API
- **测试**: Vitest + Testing Library
- **代码质量**: ESLint + Prettier
- **部署**: Azure Static Web Apps

## 开发规范

### 1. 认证系统

- 使用 [useAuth.tsx](mdc:src/hooks/useAuth.tsx) 进行认证管理
- AuthProvider 已在 [main.tsx](mdc:src/main.tsx) 中配置
- 认证状态通过 Context 全局共享
- 登录信息存储在 localStorage

### 2. 组件开发

- 所有组件使用 TypeScript
- 函数组件优先，使用 React.FC 类型
- 组件文件结构：`ComponentName/index.ts` + `ComponentName/ComponentName.tsx`
- 使用 React Bootstrap 组件保持 UI 一致性

### 3. 路由配置

- 主路由配置在 [App.tsx](mdc:src/App.tsx)
- 当前路由：`/login` - 登录页面
- 待添加路由：
  - `/` - 泵列表页面
  - `/pump/:id` - 泵详情页面
  - `/inspection` - 检查页面

### 4. 数据获取

- 使用 [mockDataFetch.ts](mdc:src/utils/mockDataFetch.ts) 模拟 API 调用
- 支持的端点：
  - `/login` - 登录验证
  - `/getUserList` - 获取用户列表
- 需要添加泵相关的 API 端点

### 5. 测试规范

- 每个组件都应有对应的测试文件
- 测试文件命名：`ComponentName.test.tsx`
- 参考 [Login.test.tsx](mdc:src/app/Login/Login.test.tsx) 的测试模式
- 使用 Vitest + Testing Library

### 6. 代码风格

- 使用 ESLint 配置：[eslint.config.js](mdc:eslint.config.js)
- 使用 Prettier 格式化代码
- 强制使用单引号和分号
- 禁用 console.log (warn 级别)

### 7. CI/CD 流程

- GitHub Actions 配置：[azure-static-web-apps](mdc:.github/workflows/azure-static-web-apps-mango-coast-0a674fc00.yml)
- 自动运行：格式检查、Lint、测试、构建
- 部署到 Azure Static Web Apps

## 下一步开发计划

### 优先级 1: 泵列表页面

- 实现 [PumpList.tsx](mdc:src/app/PumpList/PumpList.tsx) 组件
- 添加搜索和过滤功能
- 集成 mockDataFetch 获取泵数据

### 优先级 2: 泵详情页面

- 完善 [PumpDetail.tsx](mdc:src/app/PumpDetail/PumpDetail.tsx) 组件
- 实现泵管理功能
- 添加路由参数处理

### 优先级 3: 导航和布局

- 完善 [Navbar.tsx](mdc:src/app/components/Navbar/Navbar.tsx) 组件
- 添加用户信息显示
- 实现登出功能

### 优先级 4: 泵检查功能

- 创建检查页面组件
- 实现检查表单
- 添加检查历史记录

## 关键提醒

- 保持代码简洁，遵循 React 最佳实践
- 每个功能都要有相应的测试
- 使用 TypeScript 确保类型安全
- 遵循响应式设计原则
- 考虑用户体验和无障碍性
